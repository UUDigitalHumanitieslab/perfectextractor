import sysimport globimport shutilimport osimport subprocessimport timeimport platform# TODO: This is a work-in-progress script that splits Europarl into years and then runs the extractors,# TODO: instead of trying to run on the whole corpus at once. Made by @bbonf.LOG_FILE = '/tmp/neg.log'PERFECT_EXTRACTOR_DIR = 'perfectextractor'CORES = 2CAT_CMD = 'cat'if platform.system() == 'Windows':    LOG_FILE = 'C:/neg.log'    PERFECT_EXTRACTOR_DIR = 'C:/perfectextractor'    CORES = 4    CAT_CMD = 'type'class SimpleLogger(object):    def __init__(self):        self.terminal = sys.stdout        self.log = open(LOG_FILE, 'a')    def write(self, message):        self.terminal.write(message)        self.terminal.flush()        self.log.write(message)        self.log.flush()sys.stdout = SimpleLogger()langs = ['en', 'nl', 'de', 'it', 'es', 'fr', 'el']def split_xmls():    print 'splitting'    src_path = 'xml'    dst_path = 'split'    try:        os.mkdir(dst_path)    except OSError:        pass    for lang in langs:        print 'splitting\t'+lang        for f in glob.glob(os.path.join(src_path, lang, '*')):            year = os.path.split(f)[1].split('-')[1]            path = os.path.join(dst_path, year, lang)            if not os.path.exists(os.path.join(dst_path, year)):                os.mkdir(os.path.join(dst_path, year))            if not os.path.exists(path):                os.mkdir(path)            shutil.move(f, path)    print 'done splitting'def pick_alignments():    print 'picking alignments'    for year in glob.glob(os.path.join('split', '*')):        print year        for lang in langs:            if lang == 'nl':                continue            os.system('python {pe}/pick_alignments.py xml/{lang}-nl.xml {out} {search}'.format(                out=os.path.join(year, lang+'-nl.xml'),                search=os.path.split(year)[1],                lang=lang,                pe=PERFECT_EXTRACTOR_DIR))    print 'done picking alignments'def run_parallel(from_, to=None):    years = glob.glob(os.path.join('split', '*'))    # TODO: this refers to a non-existent script, neg.py, consider referring to an existing one instead    FDEVNULL = open(os.devnull, 'w')    queue = []    if to is not None:        queue = [['python', os.path.join(PERFECT_EXTRACTOR_DIR, 'neg.py'), '-t', ','.join(to), '-d', y, from_] for y in years]    else:        queue = [['python', os.path.join(PERFECT_EXTRACTOR_DIR, 'neg.py'), '-d', y, from_] for y in years]    i = CORES    ps = [subprocess.Popen(args, stdout=FDEVNULL) for args in queue[:i]]    while len(ps) > 0:        for p in ps:            if p.poll() is not None:                print '%d done: %d' % (p.pid, p.returncode)                print 'left: ', '\n'.join(years[i:])                ps.remove(p)                if i < len(years):                    print 'launching %s' % queue[i][-1]                    ps.append(subprocess.Popen(queue[i], stdout=FDEVNULL))                    i += 1        time.sleep(1)    print 'all child processes are done'def merge_csvs(lang):    srcs = ' '.join(glob.glob(os.path.join('split', '*', '{lang}-{lang}.csv'.format(lang=lang))))    os.system('{cat_cmd} {srcs} > merged-{time}.csv'.format(        cat_cmd=CAT_CMD, srcs=srcs, time=time.time()))    def main():    t = time.time()    #split_xmls()    #pick_alignments()    print 'running main script'    #run_parallel('nl', filter(lambda x:x!='nl', langs))#, 'nl')    merge_csvs('nl')    print 'done', (time.time() - t)if __name__ == '__main__':    main()